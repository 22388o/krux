# The MIT License (MIT)

# Copyright (c) 2021 Tom J. Sun

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

#!/bin/bash
set -e

SRC_DIR="/src/src"
FIRMWARE_DIR="/src/firmware"
SCRIPTS_DIR="$FIRMWARE_DIR/scripts"
BUILD_DIR="$FIRMWARE_DIR/Kboot/build"

# From https://unix.stackexchange.com/a/634849
getdevice() {
    idV=${1%:*}
    idP=${1#*:}
    for path in `find /sys/ -name idVendor | rev | cut -d/ -f 2- | rev`; do
        if grep -q $idV $path/idVendor; then
            if grep -q $idP $path/idProduct; then
                find $path -name 'device' | rev | cut -d / -f 2 | rev
            fi
        fi
    done
}

panic() {
    printf "%s\n" "$1" >&2
    exit 1
}

if [ "$1" == "setup" ]; then
    docker build . -t krux-builder
elif [ "$1" == "build" ]; then
    version="$2"
    locale="en-US"
    if [ ! -z "$3" ]; then
        locale="$3"
    fi
    
    stty -echo
    printf "Signer Private Key (Leave empty to generate): "
    read privkey
    stty echo
    printf "\n"
    if [ -z "$privkey" ]; then
        privkey_cmd="docker run --rm -w "$SCRIPTS_DIR" -it krux-builder python3 create_private_key.py"
        privkey=$($privkey_cmd)
    fi

    pubkey_cmd="docker run --rm -w "$SCRIPTS_DIR" -it krux-builder python3 derive_public_key.py "$privkey""
    pubkey=$($pubkey_cmd)

    sed -i -- "s/SIGNER_PUBKEY = '.*'/SIGNER_PUBKEY = '$pubkey'/g" src/firmware.py
    sed -i -- "s/VERSION = '.*'/VERSION = '$version'/g" src/boot.py

    docker build . -t krux-builder --build-arg LOCALE=$locale

    sign_cmd="docker create -w "$SCRIPTS_DIR" krux-builder python3 sign.py $BUILD_DIR/firmware.bin "$privkey""
    CID=$($sign_cmd)
    docker start ${CID}
    docker cp ${CID}:$BUILD_DIR/firmware.bin "firmware-v${version}.bin"
    docker cp ${CID}:$BUILD_DIR/firmware.bin.sig "firmware-v${version}.bin.sig"
    docker cp ${CID}:$BUILD_DIR/firmware.bin.sha256.txt "firmware-v${version}.bin.sha256.txt"
    docker rm ${CID}

    if [ ! -z "$privkey_cmd" ]; then
        echo "Your generated Signer Private Key is below. Please write it down somewhere safe."
        echo $privkey
    fi
elif [ "$1" == "flash" ]; then
    usb_device_name="$(getdevice 0403:6001)"
    if [ -z "$usb_device_name" ]; then
        panic "Failed to find device via USB. Is it connected and powered on?"
    fi
    docker run --privileged --device=/dev/$usb_device_name:/dev/ttyUSB0 --rm -w "$BUILD_DIR" -it krux-builder python3 ktool.py -B goE -p /dev/ttyUSB0 -b 1500000 kboot.kfpkg
elif [ "$1" == "clean" ]; then
    rm -rf build
    docker system prune --all --force
fi
