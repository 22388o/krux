{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Krux \u00b6 Krux is an open-source DIY hardware signer for Bitcoin that can sign for multisignature and single-key wallets. It is a low-cost airgapped device built from off-the-shelf parts that communicates with wallet software via QR codes and wipes its memory after every session. You can even attach a thermal printer and print out the QR codes that it generates. To learn more about how Krux works, check out Getting Started .","title":"Home"},{"location":"#krux","text":"Krux is an open-source DIY hardware signer for Bitcoin that can sign for multisignature and single-key wallets. It is a low-cost airgapped device built from off-the-shelf parts that communicates with wallet software via QR codes and wipes its memory after every session. You can even attach a thermal printer and print out the QR codes that it generates. To learn more about how Krux works, check out Getting Started .","title":"Krux"},{"location":"faq/","text":"Why isn't Krux scanning my QR code? \u00b6 The level of detail that you see is what Krux sees. If the QR code shown on the device's screen is blurry, the camera lens of the device may be out of focus. It can be adjusted by rotating it (with your fingertip) clockwise or counter-clockwise to achieve a clearer result. If you have adjusted the lens already, the device may be too far away or too close to the code to read it. Start by holding the device as close to the QR code as possible and pulling away slowly until all or most of the QR code is viewable within the screen. If the code on the screen looks crisp, Krux should read it quickly and give you immediate feedback. If you are in a dark setting, you can hold down the front button of the device to turn on its LED light to potentially increase visibility. Why am I getting an error when I try to scan a QR code? \u00b6 If Krux is recognizing that it sees a QR code but is displaying an error message after reading it, the likely reason is that the QR code is not in a format that Krux understands. For mnemonics, Krux recognizes: BIP-39 Plaintext (Used by Krux and https://iancoleman.io/bip39/ ) SeedSigner Seed QR Format UR Type crypto-bip39 For loading wallets, Krux recognizes: JSON with at least a descriptor key containing an output descriptor string Key-value INI files with at least Format , Policy , and Derivation keys UR Type crypto-output For PSBTs, Krux recognizes: Base43, Base58, and Base64-encoded bytes Raw Bytes UR Type crypto-psbt Additionally, Krux recognizes animated QR codes that use either the plaintext pMofN or binary UR encodings.","title":"FAQ"},{"location":"faq/#why-isnt-krux-scanning-my-qr-code","text":"The level of detail that you see is what Krux sees. If the QR code shown on the device's screen is blurry, the camera lens of the device may be out of focus. It can be adjusted by rotating it (with your fingertip) clockwise or counter-clockwise to achieve a clearer result. If you have adjusted the lens already, the device may be too far away or too close to the code to read it. Start by holding the device as close to the QR code as possible and pulling away slowly until all or most of the QR code is viewable within the screen. If the code on the screen looks crisp, Krux should read it quickly and give you immediate feedback. If you are in a dark setting, you can hold down the front button of the device to turn on its LED light to potentially increase visibility.","title":"Why isn't Krux scanning my QR code?"},{"location":"faq/#why-am-i-getting-an-error-when-i-try-to-scan-a-qr-code","text":"If Krux is recognizing that it sees a QR code but is displaying an error message after reading it, the likely reason is that the QR code is not in a format that Krux understands. For mnemonics, Krux recognizes: BIP-39 Plaintext (Used by Krux and https://iancoleman.io/bip39/ ) SeedSigner Seed QR Format UR Type crypto-bip39 For loading wallets, Krux recognizes: JSON with at least a descriptor key containing an output descriptor string Key-value INI files with at least Format , Policy , and Derivation keys UR Type crypto-output For PSBTs, Krux recognizes: Base43, Base58, and Base64-encoded bytes Raw Bytes UR Type crypto-psbt Additionally, Krux recognizes animated QR codes that use either the plaintext pMofN or binary UR encodings.","title":"Why am I getting an error when I try to scan a QR code?"},{"location":"parts/","text":"Part List \u00b6 M5StickV \u00b6 This is the main hardware device that you will need. The M5StickV is available from many distributors, including: M5Stack Adafruit Mouser Digi-Key Lee's Electronic Cytron Pimoroni OKDO You can expect to pay $30-$50 for one depending on which distributor you choose. USB-C Charge Cable \u00b6 This will be included with the M5StickV that you purchase from one of the distributors above. It will be necessary to power and charge the device and to change its firmware. MicroSD Card \u00b6 Not all microSD cards will work with the M5StickV. Make sure to use one that has been tested and shown to work with the device already. The size of the SD card isn't important; anything over a few megabytes will be plenty. (Optional) Thermal Printer \u00b6 Krux has the ability to print all QR codes it generates, including mnemonic, xpub, wallet backup, and signed PSBT, via a locally-connected thermal printer from Adafruit over its serial port. Any of their thermal printers will work, but the starter pack would be the easiest way to get started since it includes all the parts (except the one below) you will need to begin printing. (Optional) Conversion Cable for Thermal Printer \u00b6 To connect the printer to the M5StickV, you will need a conversion cable with a 4-pin female Grove connector on one end (to connect to the M5StickV) and 4-pin male jumpers on the other end (to connect to the printer). You can find them at one of the distributors above or from Amazon.","title":"Part List"},{"location":"parts/#part-list","text":"","title":"Part List"},{"location":"parts/#m5stickv","text":"This is the main hardware device that you will need. The M5StickV is available from many distributors, including: M5Stack Adafruit Mouser Digi-Key Lee's Electronic Cytron Pimoroni OKDO You can expect to pay $30-$50 for one depending on which distributor you choose.","title":"M5StickV"},{"location":"parts/#usb-c-charge-cable","text":"This will be included with the M5StickV that you purchase from one of the distributors above. It will be necessary to power and charge the device and to change its firmware.","title":"USB-C Charge Cable"},{"location":"parts/#microsd-card","text":"Not all microSD cards will work with the M5StickV. Make sure to use one that has been tested and shown to work with the device already. The size of the SD card isn't important; anything over a few megabytes will be plenty.","title":"MicroSD Card"},{"location":"parts/#optional-thermal-printer","text":"Krux has the ability to print all QR codes it generates, including mnemonic, xpub, wallet backup, and signed PSBT, via a locally-connected thermal printer from Adafruit over its serial port. Any of their thermal printers will work, but the starter pack would be the easiest way to get started since it includes all the parts (except the one below) you will need to begin printing.","title":"(Optional) Thermal Printer"},{"location":"parts/#optional-conversion-cable-for-thermal-printer","text":"To connect the printer to the M5StickV, you will need a conversion cable with a 4-pin female Grove connector on one end (to connect to the M5StickV) and 4-pin male jumpers on the other end (to connect to the printer). You can find them at one of the distributors above or from Amazon.","title":"(Optional) Conversion Cable for Thermal Printer"},{"location":"support/","text":"Support the Project \u00b6 Ways you can help \u00b6 Development \u00b6 Audit the code, file an issue, make a pull request, or do all three. :) Documentation \u00b6 I'd like to see Krux help as many people as possible, and in order to do that it needs good documentation. If you see a better way to word something, please make a PR, no matter how small. Translation \u00b6 Krux has support for different languages. If it's missing a language or has an awkward translation, please file an issue or make a PR! Social \u00b6 I'm an engineer, not a marketer. If you like Krux, help spread the word! Financial \u00b6 Krux is a self-funded passion project. If you're a generous soul, tips are accepted at the following Bitcoin address: 19f8HVt8LZKzBv8CuBYnxCqn5sd75V658J Thank you!","title":"Support the Project"},{"location":"support/#support-the-project","text":"","title":"Support the Project"},{"location":"support/#ways-you-can-help","text":"","title":"Ways you can help"},{"location":"support/#development","text":"Audit the code, file an issue, make a pull request, or do all three. :)","title":"Development"},{"location":"support/#documentation","text":"I'd like to see Krux help as many people as possible, and in order to do that it needs good documentation. If you see a better way to word something, please make a PR, no matter how small.","title":"Documentation"},{"location":"support/#translation","text":"Krux has support for different languages. If it's missing a language or has an awkward translation, please file an issue or make a PR!","title":"Translation"},{"location":"support/#social","text":"I'm an engineer, not a marketer. If you like Krux, help spread the word!","title":"Social"},{"location":"support/#financial","text":"Krux is a self-funded passion project. If you're a generous soul, tips are accepted at the following Bitcoin address: 19f8HVt8LZKzBv8CuBYnxCqn5sd75V658J Thank you!","title":"Financial"},{"location":"getting-started/about/","text":"Krux is an airgapped hardware signer built on top of the M5StickV , an open-source hardware device from M5Stack . All operations in Krux are done via QR code. You can load your BIP-39 mnemonic, import a wallet descriptor, and sign transactions without ever having to plug the device into your computer (other than to flash the firmware). It reads QR codes in with its camera and writes QR codes out to its screen or to paper via an optional thermal printer attachment . Unlike a hardware wallet, Krux does not come with its own wallet software. Instead, you can use Krux with wallet coordinators to manage wallets and create transactions from your computer while never giving them access to your private keys. Krux was built to be vendor agnostic and works with many popular wallet coordinators, including: Specter Desktop Sparrow Wallet BlueWallet Electrum These applications let you create and manage your multisig and single-key wallets, generate receive addresses, and send funds by creating partially signed bitcoin transactions (PSBTs) that you can sign with your hardware wallets and signers, such as Krux.","title":"About"},{"location":"getting-started/advanced-usage/","text":"TODO Settings Changing to testnet Troubleshooting","title":"Advanced Usage"},{"location":"getting-started/generating-a-mnemonic/","text":"Krux has support for creating 12- and 24-word mnemonics. Because true entropy is difficult to produce, especially with an embedded device like the M5StickV, Krux outsources entropy generation to the user. Dice Rolls \u00b6 At the start screen, once you select New Mnemonic , you will be taken to a second menu where you can choose to create a mnemonic via rolls of a D6 (standard six-sided die) or D20 (20-sided die). The number of dice rolls you choose determines the amount of words in the final mnemonic. Via D6 \u00b6 The entropy in a single roll of a D6 is 2.585 bits ( log 2 (6) ); therefore 50 rolls will result in 128 bits of entropy, enough to generate a 12-word mnemonic. Doubling the amount of rolls doubles the entropy to 256 bits, resulting in a 24-word mnemonic. Via D20 \u00b6 Since a D20 has more possible outcomes, the entropy is increased per roll to 4.322 bits ( log 2 (20) ). This means that only 30 rolls are necessary to create a 12-word mnemonic and 60 rolls for a 24-word mnemonic. How it works \u00b6 Krux keeps track of every roll you enter and displays the cumulative string after each roll. When you have entered your final roll, Krux will hash this string using SHA256 and output the resulting hash to the screen so that you can verify it for yourself. Krux then takes this hash, runs unhexlify on it to encode it as bytes, and deterministically converts it into a mnemonic according to the BIP-39 Reference Implementation . Note: For 12-word mnemonics, only the first half of the SHA256 hash is used (128 bits), while 24-word mnemonics use the full hash (256 bits). Alternatives \u00b6 See here for a good method to generate a mnemonic manually, or visit Ian Coleman's BIP-39 Tool offline or on an airgapped device to generate one automatically. It's worth noting that Ian's tool is able to take a mnemonic and generate a QR code that Krux can read in via the QR input method mentioned on the next page.","title":"Generating a Mnemonic"},{"location":"getting-started/generating-a-mnemonic/#dice-rolls","text":"At the start screen, once you select New Mnemonic , you will be taken to a second menu where you can choose to create a mnemonic via rolls of a D6 (standard six-sided die) or D20 (20-sided die). The number of dice rolls you choose determines the amount of words in the final mnemonic.","title":"Dice Rolls"},{"location":"getting-started/generating-a-mnemonic/#via-d6","text":"The entropy in a single roll of a D6 is 2.585 bits ( log 2 (6) ); therefore 50 rolls will result in 128 bits of entropy, enough to generate a 12-word mnemonic. Doubling the amount of rolls doubles the entropy to 256 bits, resulting in a 24-word mnemonic.","title":"Via D6"},{"location":"getting-started/generating-a-mnemonic/#via-d20","text":"Since a D20 has more possible outcomes, the entropy is increased per roll to 4.322 bits ( log 2 (20) ). This means that only 30 rolls are necessary to create a 12-word mnemonic and 60 rolls for a 24-word mnemonic.","title":"Via D20"},{"location":"getting-started/generating-a-mnemonic/#how-it-works","text":"Krux keeps track of every roll you enter and displays the cumulative string after each roll. When you have entered your final roll, Krux will hash this string using SHA256 and output the resulting hash to the screen so that you can verify it for yourself. Krux then takes this hash, runs unhexlify on it to encode it as bytes, and deterministically converts it into a mnemonic according to the BIP-39 Reference Implementation . Note: For 12-word mnemonics, only the first half of the SHA256 hash is used (128 bits), while 24-word mnemonics use the full hash (256 bits).","title":"How it works"},{"location":"getting-started/generating-a-mnemonic/#alternatives","text":"See here for a good method to generate a mnemonic manually, or visit Ian Coleman's BIP-39 Tool offline or on an airgapped device to generate one automatically. It's worth noting that Ian's tool is able to take a mnemonic and generate a QR code that Krux can read in via the QR input method mentioned on the next page.","title":"Alternatives"},{"location":"getting-started/installing/","text":"For now, Krux must be built from source. In the future, we will make PGP-signed releases available for download. Requirements \u00b6 Hardware \u00b6 You will need the M5StickV, a supported microSD card , a USB-C cable, and a computer with a USB port to continue. Consult the part list for more information. Software \u00b6 You will need a computer with git and vagrant installed. Fetch the code \u00b6 In a terminal, run the following: git clone --recurse-submodules https://github.com/jreesun/krux This will pull down the Krux source code as well as the code for all its dependencies and put them inside a new krux folder. Note: When you wish to pull down updates to this repo, you can run the following inside the krux folder: git pull origin main && git submodule update --recursive Spin up a virtual machine \u00b6 After you have installed Vagrant, run the following inside the krux folder to spin up a new VM: vagrant up Setup the devtools \u00b6 Before you build the firmware for the first time, you will need to run the setup script to install tools necessary for signing builds: vagrant ssh -c 'cd /vagrant; ./krux setup' Build the firmware \u00b6 Run the following: vagrant ssh -c 'cd /vagrant; ./krux build 1.0.0 en-US' Replace 1.0.0 with the version you want to tag the build with. Prefer a different language? You can replace en-US in the command above with one of the following supported locales: de-DE (German) es-MX (Spanish) fr-FR (French) vi-VN (Vietnamese) Are we missing one? Make a PR! When you run the command, you will be prompted to supply a Signer Private Key . If you don't have one, you can leave it blank and hit enter to have one generated for you. This key is used to sign the firmware. At this point, you can go brew a coffee because it will take a while to complete. If all goes well, you should see three new files appear in the krux directory: firmware-v1.0.0.bin firmware-v1.0.0.bin.sha256.txt firmware-v1.0.0.bin.sig The first file is the firmware that will be installed on the device, the second file is the sha256 hash of the firmware, and the third file is your signature of the sha256 hash verifying that you generated the build. Flash the firmware onto the M5StickV \u00b6 Connect the M5StickV to your computer via USB, power it on (left-side button), and run the following: vagrant reload && vagrant ssh -c 'cd /vagrant; ./krux flash' Note: vagrant reload is necessary in order for the newly-inserted USB device to be detected and passed through to the VM on startup. If this command fails with the error Failed to find device via USB. Is it connected and powered on? , make sure that your user has been added to the vboxusers group. On Mac or Linux, run the following command: sudo usermod -a -G vboxusers <user> If the flashing process fails midway through, check the connection, restart the device, and try the command again. If everything worked, you should see... If after 30 seconds you still see a black screen, try power cycling the device by holding down the power button for six seconds. Congrats, you're now running Krux! Upgrade via microSD card \u00b6 Once you've installed the initial firmware on your device via USB, you can either continue updating the device by flashing or you can perform upgrades via microSD card to keep the device airgapped. To perform an upgrade, simply copy the firmware-v1.0.0.bin and firmware-v1.0.0.bin.sig files to the root of a FAT-32 formatted microSD card, insert the card into your M5StickV, and reboot the device. If it detects the new firmware file and is able to verify that the signature was generated by you, you will be prompted to install it.","title":"Installing"},{"location":"getting-started/installing/#requirements","text":"","title":"Requirements"},{"location":"getting-started/installing/#hardware","text":"You will need the M5StickV, a supported microSD card , a USB-C cable, and a computer with a USB port to continue. Consult the part list for more information.","title":"Hardware"},{"location":"getting-started/installing/#software","text":"You will need a computer with git and vagrant installed.","title":"Software"},{"location":"getting-started/installing/#fetch-the-code","text":"In a terminal, run the following: git clone --recurse-submodules https://github.com/jreesun/krux This will pull down the Krux source code as well as the code for all its dependencies and put them inside a new krux folder. Note: When you wish to pull down updates to this repo, you can run the following inside the krux folder: git pull origin main && git submodule update --recursive","title":"Fetch the code"},{"location":"getting-started/installing/#spin-up-a-virtual-machine","text":"After you have installed Vagrant, run the following inside the krux folder to spin up a new VM: vagrant up","title":"Spin up a virtual machine"},{"location":"getting-started/installing/#setup-the-devtools","text":"Before you build the firmware for the first time, you will need to run the setup script to install tools necessary for signing builds: vagrant ssh -c 'cd /vagrant; ./krux setup'","title":"Setup the devtools"},{"location":"getting-started/installing/#build-the-firmware","text":"Run the following: vagrant ssh -c 'cd /vagrant; ./krux build 1.0.0 en-US' Replace 1.0.0 with the version you want to tag the build with. Prefer a different language? You can replace en-US in the command above with one of the following supported locales: de-DE (German) es-MX (Spanish) fr-FR (French) vi-VN (Vietnamese) Are we missing one? Make a PR! When you run the command, you will be prompted to supply a Signer Private Key . If you don't have one, you can leave it blank and hit enter to have one generated for you. This key is used to sign the firmware. At this point, you can go brew a coffee because it will take a while to complete. If all goes well, you should see three new files appear in the krux directory: firmware-v1.0.0.bin firmware-v1.0.0.bin.sha256.txt firmware-v1.0.0.bin.sig The first file is the firmware that will be installed on the device, the second file is the sha256 hash of the firmware, and the third file is your signature of the sha256 hash verifying that you generated the build.","title":"Build the firmware"},{"location":"getting-started/installing/#flash-the-firmware-onto-the-m5stickv","text":"Connect the M5StickV to your computer via USB, power it on (left-side button), and run the following: vagrant reload && vagrant ssh -c 'cd /vagrant; ./krux flash' Note: vagrant reload is necessary in order for the newly-inserted USB device to be detected and passed through to the VM on startup. If this command fails with the error Failed to find device via USB. Is it connected and powered on? , make sure that your user has been added to the vboxusers group. On Mac or Linux, run the following command: sudo usermod -a -G vboxusers <user> If the flashing process fails midway through, check the connection, restart the device, and try the command again. If everything worked, you should see... If after 30 seconds you still see a black screen, try power cycling the device by holding down the power button for six seconds. Congrats, you're now running Krux!","title":"Flash the firmware onto the M5StickV"},{"location":"getting-started/installing/#upgrade-via-microsd-card","text":"Once you've installed the initial firmware on your device via USB, you can either continue updating the device by flashing or you can perform upgrades via microSD card to keep the device airgapped. To perform an upgrade, simply copy the firmware-v1.0.0.bin and firmware-v1.0.0.bin.sig files to the root of a FAT-32 formatted microSD card, insert the card into your M5StickV, and reboot the device. If it detects the new firmware file and is able to verify that the signature was generated by you, you will be prompted to install it.","title":"Upgrade via microSD card"},{"location":"getting-started/loading-a-mnemonic/","text":"Once you have either a 12 or 24-word mnemonic, choose Load Mnemonic on Krux's start menu, and you will be presented with several input methods: Input Methods \u00b6 Via Text \u00b6 Enter each word of your BIP-39 mnemonic one at a time. Krux will attempt to autocomplete your word to speed up the process. On your 12th or 24th word, you can leave the word blank to have Krux generate the final word of your mnemonic for you. This is handy if you chose a manual method to generate your mnemonic and want the final word to be a valid checksum. Via Numbers \u00b6 Enter each word of your BIP-39 mnemonic as a number from 1 to 2048 one at a time. You can use this list for reference. On your 12th or 24th word, you can leave the word blank to have Krux generate the final word of your mnemonic for you. This is handy if you chose a manual method to generate your mnemonic and want the final word to be a valid checksum. Via Bits \u00b6 Enter each word of your BIP-39 mnemonic as an 11-bit bitstring one at a time. On your 12th or 24th word, you can leave the word blank to have Krux generate the final word of your mnemonic for you. This is handy if you chose a manual method to generate your mnemonic and want the final word to be a valid checksum. Via QR \u00b6 It's unpleasant having to manually enter 12 or 24 words each time you want to use Krux. To remedy this you can instead use the device's camera to read a QR code containing the words (encoded as a single space-separated text string). You can either use an offline QR code generator for this (ideally on an airgapped device), or you can attach a thermal printer to your Krux and print out the mnemonic after opening your wallet via one of the manual methods first. Check out the Printing section for more information. Single-key or Multisig \u00b6 Once you have entered your mnemonic, you will be presented with the full list of words to confirm. After loading your mnemonic, you will be brought to a small menu asking if you want to use it as part of a Single-key or Multisig wallet. Your choice here will subtly change the generated xpub that is used to set up your device in your wallet coordinator software. You can learn more about the difference in the following guides for using single-key and multisig wallets. Now, onto the main menu...","title":"Loading a Mnemonic"},{"location":"getting-started/loading-a-mnemonic/#input-methods","text":"","title":"Input Methods"},{"location":"getting-started/loading-a-mnemonic/#via-text","text":"Enter each word of your BIP-39 mnemonic one at a time. Krux will attempt to autocomplete your word to speed up the process. On your 12th or 24th word, you can leave the word blank to have Krux generate the final word of your mnemonic for you. This is handy if you chose a manual method to generate your mnemonic and want the final word to be a valid checksum.","title":"Via Text"},{"location":"getting-started/loading-a-mnemonic/#via-numbers","text":"Enter each word of your BIP-39 mnemonic as a number from 1 to 2048 one at a time. You can use this list for reference. On your 12th or 24th word, you can leave the word blank to have Krux generate the final word of your mnemonic for you. This is handy if you chose a manual method to generate your mnemonic and want the final word to be a valid checksum.","title":"Via Numbers"},{"location":"getting-started/loading-a-mnemonic/#via-bits","text":"Enter each word of your BIP-39 mnemonic as an 11-bit bitstring one at a time. On your 12th or 24th word, you can leave the word blank to have Krux generate the final word of your mnemonic for you. This is handy if you chose a manual method to generate your mnemonic and want the final word to be a valid checksum.","title":"Via Bits"},{"location":"getting-started/loading-a-mnemonic/#via-qr","text":"It's unpleasant having to manually enter 12 or 24 words each time you want to use Krux. To remedy this you can instead use the device's camera to read a QR code containing the words (encoded as a single space-separated text string). You can either use an offline QR code generator for this (ideally on an airgapped device), or you can attach a thermal printer to your Krux and print out the mnemonic after opening your wallet via one of the manual methods first. Check out the Printing section for more information.","title":"Via QR"},{"location":"getting-started/loading-a-mnemonic/#single-key-or-multisig","text":"Once you have entered your mnemonic, you will be presented with the full list of words to confirm. After loading your mnemonic, you will be brought to a small menu asking if you want to use it as part of a Single-key or Multisig wallet. Your choice here will subtly change the generated xpub that is used to set up your device in your wallet coordinator software. You can learn more about the difference in the following guides for using single-key and multisig wallets. Now, onto the main menu...","title":"Single-key or Multisig"},{"location":"getting-started/navigating-the-main-menu/","text":"After entering your mnemonic, you will find yourself on Krux's main menu. Below is a breakdown of the options: Mnemonic \u00b6 This option allows you to view your mnemonic words and, if you have a thermal printer attached, print out the mnemonic as a QR code. The data in this code will be a plaintext space-separated string of the (English) words. This QR code can then be read by Krux for faster loads in the future. Public Key (xpub) \u00b6 This option displays your master extended public key (xpub) as text as well as a QR code. The QR code is in plaintext format and additionally includes derivation information (in BTC core format) that coordinator wallet software can use to determine whether it supports single-key or multisig wallets. After the xpub, a zpub or Zpub is shown depending on if a single-key or multisig wallet was chosen. This z/Zpub is usually not necessary unless you are using Electrum. If a thermal printer is attached, you can print either QR code. Wallet \u00b6 When you first select this option, you will be prompted to load a wallet. At this point, the camera will turn on and you will need to scan a wallet backup QR code from your wallet coordinator software. If scanned successfully, you will see a preview of the wallet to confirm. If you return to this option after having loaded your wallet, you will see the wallet's name and the xpubs of all cosigners along with a QR code containing the same exact data that was loaded. If you have a thermal printer attached, you can print this QR code. Note that you can't change the wallet once one has been loaded. To do this, you will need to restart the device. Scan Address \u00b6 This option turns on the camera and allows you to scan in a QR code of a receive address. Upon scanning, it will render its own QR code of the address back to the display along with the (text) address below it. You could use this feature to scan the address of someone you want to send coins to and display the QR back to your wallet coordinator rather than copy-pasting an address. If you have a thermal printer attached, you can also print this QR code. After proceeding through this screen, you will be asked if you want to check that the address belongs to your wallet. If you confirm, it will exhaustively search through as many addresses derived from your wallet as you want in order to find a match. If it finds a match, the address will turn green indicating success. If it fails to find a match and you choose not to continue searching, it will turn the address red to indicate it could not be derived. This option exists as an extra security check to verify that the address your wallet coordinator has generated is authentic and belongs to your wallet. Sign PSBT \u00b6 This option turns on the camera and allows you to scan an animated QR code of a PSBT generated by your wallet coordinator software. Upon scanning, you will be shown a preview of how much BTC is being sent, who is receiving it, and the fee that is being paid. If you confirm, a signed PSBT will be generated and an animated QR code will be displayed that you can use to import the signed PSBT back into your wallet coordinator software. If a thermal printer is attached, you can also print the QR codes.","title":"Navigating the Main Menu"},{"location":"getting-started/navigating-the-main-menu/#mnemonic","text":"This option allows you to view your mnemonic words and, if you have a thermal printer attached, print out the mnemonic as a QR code. The data in this code will be a plaintext space-separated string of the (English) words. This QR code can then be read by Krux for faster loads in the future.","title":"Mnemonic"},{"location":"getting-started/navigating-the-main-menu/#public-key-xpub","text":"This option displays your master extended public key (xpub) as text as well as a QR code. The QR code is in plaintext format and additionally includes derivation information (in BTC core format) that coordinator wallet software can use to determine whether it supports single-key or multisig wallets. After the xpub, a zpub or Zpub is shown depending on if a single-key or multisig wallet was chosen. This z/Zpub is usually not necessary unless you are using Electrum. If a thermal printer is attached, you can print either QR code.","title":"Public Key (xpub)"},{"location":"getting-started/navigating-the-main-menu/#wallet","text":"When you first select this option, you will be prompted to load a wallet. At this point, the camera will turn on and you will need to scan a wallet backup QR code from your wallet coordinator software. If scanned successfully, you will see a preview of the wallet to confirm. If you return to this option after having loaded your wallet, you will see the wallet's name and the xpubs of all cosigners along with a QR code containing the same exact data that was loaded. If you have a thermal printer attached, you can print this QR code. Note that you can't change the wallet once one has been loaded. To do this, you will need to restart the device.","title":"Wallet"},{"location":"getting-started/navigating-the-main-menu/#scan-address","text":"This option turns on the camera and allows you to scan in a QR code of a receive address. Upon scanning, it will render its own QR code of the address back to the display along with the (text) address below it. You could use this feature to scan the address of someone you want to send coins to and display the QR back to your wallet coordinator rather than copy-pasting an address. If you have a thermal printer attached, you can also print this QR code. After proceeding through this screen, you will be asked if you want to check that the address belongs to your wallet. If you confirm, it will exhaustively search through as many addresses derived from your wallet as you want in order to find a match. If it finds a match, the address will turn green indicating success. If it fails to find a match and you choose not to continue searching, it will turn the address red to indicate it could not be derived. This option exists as an extra security check to verify that the address your wallet coordinator has generated is authentic and belongs to your wallet.","title":"Scan Address"},{"location":"getting-started/navigating-the-main-menu/#sign-psbt","text":"This option turns on the camera and allows you to scan an animated QR code of a PSBT generated by your wallet coordinator software. Upon scanning, you will be shown a preview of how much BTC is being sent, who is receiving it, and the fee that is being paid. If you confirm, a signed PSBT will be generated and an animated QR code will be displayed that you can use to import the signed PSBT back into your wallet coordinator software. If a thermal printer is attached, you can also print the QR codes.","title":"Sign PSBT"},{"location":"getting-started/printing/","text":"Krux has the ability to print all QR codes it generates, including mnemonic, xpub, wallet backup, and signed PSBT, via a locally-connected thermal printer over its serial port. Consult the part list page for supported printers. Note: Printers can come with different baudrates from the manufacturer. By default, Krux assumes the connected printer will have a baudrate of 9600 . If yours is different, you can change this to 19200 in the Settings -> Printer menu. Once connected and powered on, all screens that display a QR code will begin showing a follow-up screen asking if you want to Print to QR? . You can use the middle button to confirm or the right-side button to cancel. Originally, the idea was to print out a QR code of the BIP-39 mnemonic to enable faster wallet opening over the manual method of having to input each word. Then, we realized it would be useful to backup a wallet's multisig configuration on paper as well since you need knowledge of all xpubs in a multisig wallet in order to spend from it. After that, we decided to just make it a feature across the board. Want to make a \"multisig paper wallet\" with codes for your mnemonic, xpub, and multisig wallet on one sheet? You can! Want to print out a signed PSBT and send it in the mail? You can! Just be careful what you do with the codes, since most smartphones can now quickly and easily read QR codes. Treat your QR mnemonic the same way you would treat a plaintext copy of it.","title":"Printing"},{"location":"getting-started/using-a-multisig-wallet/","text":"This guide assumes you have already created the necessary mnemonics for each cosigner in your multisig. If that is not the case, head over to the Generating a Mnemonic page and complete those steps first. Specter Desktop Sparrow BlueWallet Electrum TODO TODO TODO TODO","title":"Using a Multisig Wallet"},{"location":"getting-started/using-a-single-key-wallet/","text":"This guide assumes you have already created a mnemonic. If that is not the case, head over to the Generating a Mnemonic page and complete those steps first. Specter Desktop Sparrow BlueWallet Electrum Create the wallet \u00b6 First, enter your mnemonic into Krux and make sure to select Single-key before proceeding. The choice of single-key vs. multisig at this point will change the derivation information used to generate your extended master public key (xpub) which will affect how Specter Desktop classifies it. In Specter Desktop, you will need to import your public key by adding a new device. Press the Add new device button on the left side of the app. Krux is not listed as one of the available device types on the Add Device screen, so you will need to select the Other option. You will be taken to the Upload Keys screen where you can choose to Scan QR code . On your Krux, navigate to the Public Key (xpub) option under the main menu and show this QR code to Specter Desktop. It should import the xpub and display the Purpose as #0 Single Sig (Segwit) . Give the device a name and press Continue . You should now see the device in the devices list on the left side of the app. Now that you've added a device with your key to Specter Desktop, you can make a wallet using it. Press the Add new wallet button on the left side of the app. Choose to create a Single key wallet when it asks which type of wallet you want on the following screen. Now, select the device you just added. Give your wallet a name and make sure to select Segwit for the wallet type, then press Create wallet . Congrats, you just created a single-key wallet with your key! Receive coins \u00b6 The next screen should show your first receive address that you can send funds to. Load the wallet \u00b6 Now, load the wallet into Krux by going to the Settings page in Specter Desktop, then click the Export tab. There, press the Export button to display a QR code of your wallet. In Krux, select the Wallet menu item option and scan the QR code. If it worked, Krux should display the wallet information that it loaded: Send coins \u00b6 Now, you can send funds! Go to Send in Specter Desktop, fill out the information, and click Create unsigned transaction . You will now see a screen listing the devices in your wallet. Select the device you want to sign the transaction (PSBT) with. Specter Desktop will display an animated QR code of the PSBT that you can scan with Krux by going to Sign PSBT in its main menu. After scanning, Krux should display info about the transaction for you to confirm before signing. Once you have confirmed, Krux will begin animating a QR code of the signed transaction that you can scan into Specter Desktop. In Specter Desktop, click Scan signed transaction and show it the QR. Each part of the QR code that is read will receive a ghost icon to indicate progress. Once all parts of the QR code have been read, you should see a window popup asking you to broadcast the transaction. Click Send transaction and your transaction should be broadcasted to the network! \ud83c\udf89 TODO TODO TODO","title":"Using a Single-key Wallet"},{"location":"getting-started/using-a-single-key-wallet/#create-the-wallet","text":"First, enter your mnemonic into Krux and make sure to select Single-key before proceeding. The choice of single-key vs. multisig at this point will change the derivation information used to generate your extended master public key (xpub) which will affect how Specter Desktop classifies it. In Specter Desktop, you will need to import your public key by adding a new device. Press the Add new device button on the left side of the app. Krux is not listed as one of the available device types on the Add Device screen, so you will need to select the Other option. You will be taken to the Upload Keys screen where you can choose to Scan QR code . On your Krux, navigate to the Public Key (xpub) option under the main menu and show this QR code to Specter Desktop. It should import the xpub and display the Purpose as #0 Single Sig (Segwit) . Give the device a name and press Continue . You should now see the device in the devices list on the left side of the app. Now that you've added a device with your key to Specter Desktop, you can make a wallet using it. Press the Add new wallet button on the left side of the app. Choose to create a Single key wallet when it asks which type of wallet you want on the following screen. Now, select the device you just added. Give your wallet a name and make sure to select Segwit for the wallet type, then press Create wallet . Congrats, you just created a single-key wallet with your key!","title":"Create the wallet"},{"location":"getting-started/using-a-single-key-wallet/#receive-coins","text":"The next screen should show your first receive address that you can send funds to.","title":"Receive coins"},{"location":"getting-started/using-a-single-key-wallet/#load-the-wallet","text":"Now, load the wallet into Krux by going to the Settings page in Specter Desktop, then click the Export tab. There, press the Export button to display a QR code of your wallet. In Krux, select the Wallet menu item option and scan the QR code. If it worked, Krux should display the wallet information that it loaded:","title":"Load the wallet"},{"location":"getting-started/using-a-single-key-wallet/#send-coins","text":"Now, you can send funds! Go to Send in Specter Desktop, fill out the information, and click Create unsigned transaction . You will now see a screen listing the devices in your wallet. Select the device you want to sign the transaction (PSBT) with. Specter Desktop will display an animated QR code of the PSBT that you can scan with Krux by going to Sign PSBT in its main menu. After scanning, Krux should display info about the transaction for you to confirm before signing. Once you have confirmed, Krux will begin animating a QR code of the signed transaction that you can scan into Specter Desktop. In Specter Desktop, click Scan signed transaction and show it the QR. Each part of the QR code that is read will receive a ghost icon to indicate progress. Once all parts of the QR code have been read, you should see a window popup asking you to broadcast the transaction. Click Send transaction and your transaction should be broadcasted to the network! \ud83c\udf89 TODO TODO TODO","title":"Send coins"}]}